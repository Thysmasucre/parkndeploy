on:
  push:
    tags:
      - 'v*.*.*' # Suivi des versions selon le format sÃ©mantique MAJOR.MINOR.PATCH

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

env: 
  AZURE_RG_NAME: ${{ vars.PROJECT_NAME }}-rg-${{ vars.AZURE_RESOURCE_IDENTIFIER }}
  
permissions:
  id-token: write # Require write permission to Fetch an OIDC token (required for federated credential) and write it, it will be automatically used on actions / cli that need it

jobs:
  deploy_infrastructure:
    runs-on: ubuntu-latest
    environment: production # bind the job to the production environment

    outputs:
      appServiceName: ${{ steps.bicep_deploy.outputs.appServiceName }}
      staticWebAppName: ${{ steps.bicep_deploy.outputs.staticWebAppName }}  

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Login to Azure 
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true 

    - name: Create resource group if not exists      
      run: |
        az group show --name ${{ env.AZURE_RG_NAME }} ||
        az group create --name ${{ env.AZURE_RG_NAME }} --location ${{ secrets.AZURE_REGION }}

    - name: Deploy bicep
      id: bicep_deploy
      uses: azure/arm-deploy@v2
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        region: ${{ secrets.AZURE_REGION }}
        template: ./infrastructure/main.bicep
        parameters: |
          project=${{ vars.PROJECT_NAME }}
          location=${{ secrets.AZURE_REGION }}
          swaLocation=${{ secrets.AZURE_SWA_REGION }}
          identifier=${{ vars.AZURE_RESOURCE_IDENTIFIER }}
        resourceGroupName: ${{ env.AZURE_RG_NAME }}

    - name: Extract Git Tag Version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Version: $VERSION"
        echo "APP_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Set version as environment variable
      run: echo "APP_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Deploy Backend
      run: |
        echo "Deploying Backend version $APP_VERSION"
        dotnet publish -c Release -o ./publish /p:Version=$APP_VERSION
      env:
        APP_VERSION: ${{ env.APP_VERSION }}
    
    - name: Update package.json version
      run: npm version ${{ env.VERSION }} --no-git-tag-version
      working-directory: ./frontend


  deploy_backend:
    runs-on: ubuntu-latest
    needs: deploy_infrastructure
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Publish the app
      run: dotnet publish -c Release --property:PublishDir=publish # Publish the app to the publish folder of the API project
      working-directory: ./backend # specify where to find the solution file

    - name: Login to Azure 
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
    - name: Deploy backend to App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_APP_SERVICE_NAME }}
        package: ./publish

    - name: Extract Git Tag Version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Version: $VERSION"
        echo "APP_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Set version as environment variable
      run: echo "APP_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Deploy Backend
      run: |
        echo "Deploying Backend version $APP_VERSION"
        dotnet publish -c Release -o ./publish /p:Version=$APP_VERSION
      env:
        APP_VERSION: ${{ env.APP_VERSION }}

    - name: Update package.json version
      run: npm version ${{ env.VERSION }} --no-git-tag-version
      working-directory: ./frontend


  deploy_frontend:
    runs-on: ubuntu-latest
    needs: deploy_infrastructure
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build the app
      run: npm install && npm run build
      working-directory: ./frontend    

    - name: Login to Azure 
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get Static Web App deployment token
      run: |      
        SWA_DEPLOYMENT_TOKEN=$(az staticwebapp secrets list -n ${{ needs.deploy_infrastructure.outputs.staticWebAppName }} -o tsv --query properties.apiKey)
        echo SWA_DEPLOYMENT_TOKEN=$SWA_DEPLOYMENT_TOKEN >> $GITHUB_ENV
  
    - name: Deploy frontend to Static Web App
      uses: azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APP_API_TOKEN }}
        app_location: ./dist
        action: upload

    - name: Extract Git Tag Version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Set version as environment variable
      run: echo "APP_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Deploy Backend
      run: |
        echo "Deploying Backend version $APP_VERSION"
        dotnet publish -c Release -o ./publish /p:Version=$APP_VERSION
      env:
        APP_VERSION: ${{ env.APP_VERSION }}

    - name: Update package.json version
      run: npm version ${{ env.VERSION }} --no-git-tag-version
      working-directory: ./frontend


  ci_frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install
        working-directory: ./frontend

      - name: Build the React app
        run: npm run build
        working-directory: ./frontend

      - name: Run linting script
        run: npm run lint
        working-directory: ./frontend

  ci_backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0'

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./backend

      - name: Build the app in Release mode
        run: dotnet build -c Release
        working-directory: ./backend

  ci_frontend_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install
        working-directory: ./frontend

      - name: Build the React app
        run: npm run build
        working-directory: ./frontend

      - name: Create and upload frontend artifact
        uses: actions/upload-artifact@v3
        with:
          name: frontend-artifact
          path: ./frontend/dist

  ci_backend_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0'

      - name: Publish the app
        run: dotnet publish -c Release -o ./publish
        working-directory: ./backend

      - name: Create and upload backend artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-artifact
          path: ./backend/publish
    
  cd_pipeline:
    runs-on: ubuntu-latest
    needs: [ci_frontend_release, ci_backend_release]
    steps:
      - name: Download frontend artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend-artifact

      - name: Download backend artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-artifact
        